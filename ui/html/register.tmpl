{{ define "title" }}Register{{ end }}
{{ define "content" }}
<div class="min-h-screen flex items-center justify-center bg-gradient-to-br from-[#E558FF] via-[#9C6FFF] to-[#76A1FF] py-24 px-4">
  <div class="w-full max-w-md p-8 space-y-6 bg-white/95 rounded-2xl shadow-xl backdrop-blur-lg">
    <div class="flex flex-col items-center mb-6">
      <span class="text-4xl mb-2">✨</span>
      <h2 class="text-3xl font-bold bg-gradient-to-r from-[#9C6FFF] to-[#76A1FF] bg-clip-text text-transparent">Create Your Account</h2>
      <p class="text-gray-500 mt-2 text-center">Join the Gratitude Jar community and start your daily gratitude journey!</p>
    </div>

    <!-- Error Messages -->
    {{if .Errors}}
    <div class="rounded-md bg-red-50 p-4 mb-4">
      <div class="flex">
        <div class="flex-shrink-0">
          <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
          </svg>
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-red-800">There were errors with your submission</h3>
          <div class="mt-2 text-sm text-red-700">
            <ul class="list-disc pl-5 space-y-1">
              {{range $field, $error := .Errors}}
                <li>{{$error}}</li>
              {{end}}
            </ul>
          </div>
        </div>
      </div>
    </div>
    {{end}}

    <form method="POST" action="/register" class="space-y-6" autocomplete="off">
      <!-- Username Field -->
      <div>
        <label for="username" class="block text-sm font-medium text-gray-700">Username</label>
        <div class="mt-1">
          <input id="username" name="username" type="text" required 
                 class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 
                        focus:outline-none focus:ring-[#9C6FFF] focus:border-[#9C6FFF] sm:text-sm{{if .Errors.username}} border-red-500{{end}}"
                 placeholder="Choose a username"
                 autocomplete="off">
        </div>
        <p class="mt-1 text-sm text-gray-500">Must be at least 3 characters long</p>
      </div>

      <!-- Email Field -->
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700">Email</label>
        <div class="mt-1">
          <input id="email" name="email" type="email" required 
                 class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 
                        focus:outline-none focus:ring-[#9C6FFF] focus:border-[#9C6FFF] sm:text-sm{{if .Errors.email}} border-red-500{{end}}"
                 placeholder="you@example.com"
                 autocomplete="off">
        </div>
      </div>

      <!-- Password Field -->
      <div>
        <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
        <div class="mt-1 relative">
          <input id="password" name="password" type="password" required 
                 class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 
                        focus:outline-none focus:ring-[#9C6FFF] focus:border-[#9C6FFF] sm:text-sm{{if .Errors.password}} border-red-500{{end}}"
                 placeholder="••••••••"
                 autocomplete="new-password">
          <button type="button" 
                  class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-500"
                  onclick="togglePasswordVisibility('password', 'passwordEyeIcon')">
            <svg id="passwordEyeIcon" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
          </button>
        </div>
        <!-- Password Requirements -->
        <div class="mt-2 text-sm space-y-1">
          <p class="text-gray-500">Password requirements:</p>
          <ul class="space-y-1">
            <li id="length-check" class="flex items-center text-gray-500">
              <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              </svg>
              At least 8 characters
            </li>
            <li id="uppercase-check" class="flex items-center text-gray-500">
              <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              </svg>
              One uppercase letter
            </li>
            <li id="lowercase-check" class="flex items-center text-gray-500">
              <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              </svg>
              One lowercase letter
            </li>
            <li id="number-check" class="flex items-center text-gray-500">
              <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              </svg>
              One number
            </li>
            <li id="special-check" class="flex items-center text-gray-500">
              <svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              </svg>
              One special character
            </li>
          </ul>
        </div>
      </div>

      <!-- Confirm Password Field -->
      <div>
        <label for="confirm_password" class="block text-sm font-medium text-gray-700">Confirm Password</label>
        <div class="mt-1 relative">
          <input id="confirm_password" name="confirm_password" type="password" required 
                 class="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 
                        focus:outline-none focus:ring-[#9C6FFF] focus:border-[#9C6FFF] sm:text-sm{{if .Errors.confirm_password}} border-red-500{{end}}"
                 placeholder="••••••••">
          <button type="button" 
                  class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-400 hover:text-gray-500"
                  onclick="togglePasswordVisibility('confirm_password', 'confirmEyeIcon')">
            <svg id="confirmEyeIcon" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
            </svg>
          </button>
        </div>
      </div>

      <!-- Submit Button -->
      <div>
        <button type="submit" 
                class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white 
                       bg-gradient-to-r from-[#9C6FFF] to-[#76A1FF] hover:from-[#8A5AE8] hover:to-[#6990E8] 
                       focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-[#9C6FFF]">
          Create Account
        </button>
      </div>
    </form>

    <div class="text-center">
      <p class="text-sm text-gray-600">
        Already have an account?
        <a href="/user/login" class="font-medium text-[#9C6FFF] hover:text-[#76A1FF] transition-colors duration-200">
          Sign in
        </a>
      </p>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const password = document.getElementById('password');
    const lengthCheck = document.getElementById('length-check');
    const uppercaseCheck = document.getElementById('uppercase-check');
    const lowercaseCheck = document.getElementById('lowercase-check');
    const numberCheck = document.getElementById('number-check');
    const specialCheck = document.getElementById('special-check');

    const checkmarks = {
        success: `<svg class="h-4 w-4 mr-2 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                 </svg>`,
        pending: `<svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                 </svg>`
    };

    function updateRequirement(element, valid) {
        element.innerHTML = element.innerHTML.replace(/<svg.*\/svg>/, valid ? checkmarks.success : checkmarks.pending);
        element.className = valid ? 'flex items-center text-green-600' : 'flex items-center text-gray-500';
    }

    password.addEventListener('input', function() {
        const value = this.value;
        
        // Check length
        updateRequirement(lengthCheck, value.length >= 8);
        
        // Check uppercase
        updateRequirement(uppercaseCheck, /[A-Z]/.test(value));
        
        // Check lowercase
        updateRequirement(lowercaseCheck, /[a-z]/.test(value));
        
        // Check number
        updateRequirement(numberCheck, /[0-9]/.test(value));
        
        // Check special character
        updateRequirement(specialCheck, /[^A-Za-z0-9]/.test(value));
    });
});

function togglePasswordVisibility(inputId, iconId) {
  const input = document.getElementById(inputId);
  const icon = document.getElementById(iconId);
  
  if (input.type === 'password') {
    input.type = 'text';
    // Change to "hide" icon
    icon.innerHTML = `
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
    `;
  } else {
    input.type = 'password';
    // Change back to "show" icon
    icon.innerHTML = `
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
    `;
  }
}
</script>
{{ end }}
