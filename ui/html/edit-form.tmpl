{{define "title"}}Edit Gratitude Note{{end}}

{{define "nav"}}
<div class="flex space-x-4">
    <a href="/notes" class="nav-link">My Notes</a>
    <a href="/gratitude" class="nav-link">Add Note</a>
    <a href="/logout" class="nav-link">Logout</a>
</div>
{{end}}

{{define "content"}}
<div id="note-{{.PageData.Note.ID}}" class="note-card bg-white/95 backdrop-blur-lg rounded-2xl p-6 shadow-xl transition-all duration-300">
    <form method="POST"
          hx-post="/notes/{{.PageData.Note.ID}}"
          hx-headers='{"X-HTTP-Method-Override": "PUT", "X-CSRF-Token": "{{.CSRFToken}}"}'
          hx-target="#note-{{.Note.ID}}"
          hx-swap="outerHTML"
          class="space-y-6">
        <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">
        
        <div class="flex justify-between items-start mb-4">
            <div class="flex items-center space-x-3">
                <span class="text-3xl">{{.PageData.Note.Emoji}}</span>
                <input type="text" 
                       name="title" 
                       value="{{.PageData.Note.Title}}"
                       required
                       minlength="3"
                       maxlength="100"
                       class="bg-white/80 border-b border-gray-400 focus:border-[#9C6FFF] text-gray-900 text-xl font-semibold focus:outline-none">
                <input type="hidden" name="emoji" value="{{.PageData.Note.Emoji}}">
            </div>
        </div>

        <textarea name="content" 
                  required
                  minlength="10"
                  maxlength="1000"
                  placeholder="Express your gratitude (at least 10 characters)"
                  class="w-full bg-white/80 border-b border-gray-400 focus:border-[#9C6FFF] text-gray-900 focus:outline-none resize-none">{{.PageData.Note.Content}}</textarea>

        <div class="flex flex-col space-y-4">
            <select name="category"
                    required
                    class="bg-white/80 border-b border-gray-400 focus:border-[#9C6FFF] text-gray-800 focus:outline-none">
                <option value="personal" {{if eq .PageData.Note.Category "personal"}}selected{{end}}>✨ Personal Growth</option>
                <option value="work" {{if eq .PageData.Note.Category "work"}}selected{{end}}>💼 Work</option>
                <option value="family" {{if eq .PageData.Note.Category "family"}}selected{{end}}>👨‍👩‍👧‍👦 Family</option>
                <option value="achievements" {{if eq .PageData.Note.Category "achievements"}}selected{{end}}>🏆 Achievements</option>
                <option value="health" {{if eq .PageData.Note.Category "health"}}selected{{end}}>🌱 Health</option>
                <option value="experiences" {{if eq .PageData.Note.Category "experiences"}}selected{{end}}>🌟 Experiences</option>
            </select>

            <div class="flex space-x-2">
                <button type="button"
                        hx-get="/notes"
                        hx-target="#note-{{.PageData.Note.ID}}"
                        hx-swap="outerHTML"
                        class="px-4 py-2 text-gray-700 bg-gray-200 hover:bg-gray-300 rounded-lg transition-all duration-200">
                    Cancel
                </button>
                <button type="submit"
                        class="px-4 py-2 text-white bg-[#9C6FFF] hover:bg-[#7C4DFF] rounded-lg transition-all duration-200">
                    Save Changes
                </button>
            </div>
        </div>

        <div class="error-message text-red-500 text-sm mt-1" data-field="title"></div>
        <div class="error-message text-red-500 text-sm mt-1" data-field="content"></div>
        <div class="error-message text-red-500 text-sm mt-1" data-field="category"></div>
        <div class="error-message text-red-500 text-sm mt-1" data-field="emoji"></div>
    </form>
</div>

<style>
@keyframes float {
    0%, 100% { transform: translate(0, 0) rotate(0deg); }
    50% { transform: translate(0, -10px) rotate(1deg); }
}

.animate-float {
    animation: float 6s ease-in-out infinite;
}

.glass {
    backdrop-filter: blur(12px);
}

.emoji-btn.active {
    background: rgba(255, 255, 255, 0.4);
    transform: scale(1.1);
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form');
    form.addEventListener('htmx:afterRequest', function(event) {
        // Clear previous error messages
        document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
        
        if (event.detail.xhr.status === 400) {
            try {
                const errors = JSON.parse(event.detail.xhr.responseText);
                Object.entries(errors).forEach(([field, message]) => {
                    const errorDiv = document.querySelector(`.error-message[data-field="${field}"]`);
                    if (errorDiv) {
                        errorDiv.textContent = message;
                        // Add error styling to the input
                        const input = document.querySelector(`[name="${field}"]`);
                        if (input) {
                            input.classList.add('border-red-500');
                            input.classList.remove('border-gray-400');
                        }
                    }
                });
            } catch (e) {
                console.error('Error parsing validation response:', e);
            }
        }
    });

    // Reset error styling when user starts typing
    document.querySelectorAll('input, textarea, select').forEach(input => {
        input.addEventListener('input', function() {
            this.classList.remove('border-red-500');
            this.classList.add('border-gray-400');
            const errorDiv = document.querySelector(`.error-message[data-field="${this.name}"]`);
            if (errorDiv) {
                errorDiv.textContent = '';
            }
        });
    });
});
</script>
{{end}} 