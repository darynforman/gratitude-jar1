{{define "title"}}Add Gratitude Note{{end}}

{{define "content"}}
<div class="min-h-screen bg-gradient-to-br from-[#E558FF] via-[#9C6FFF] to-[#76A1FF] pt-32 relative overflow-hidden">
    <!-- Decorative Circles -->
    <div class="absolute top-0 left-0 w-[800px] h-[800px] bg-white/10 rounded-full blur-3xl transform -translate-x-1/2 -translate-y-1/2 animate-pulse"></div>
    <div class="absolute bottom-0 right-0 w-[1000px] h-[1000px] bg-white/10 rounded-full blur-3xl transform translate-x-1/3 translate-y-1/3 animate-pulse delay-700"></div>
    <div class="absolute top-1/2 left-1/2 w-[600px] h-[600px] bg-white/5 rounded-full blur-3xl transform -translate-x-1/2 -translate-y-1/2 animate-pulse delay-1000"></div>

    <!-- Polka Dots -->
    <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="polka-dot"></div>
        <div class="polka-dot"></div>
        <div class="polka-dot"></div>
        <div class="polka-dot"></div>
        <div class="polka-dot"></div>
        <div class="polka-dot"></div>
        <div class="polka-dot"></div>
        <div class="polka-dot"></div>
    </div>

    <!-- Main Content -->
    <div class="max-w-4xl mx-auto px-4 relative">
        <div class="text-center mb-12">
            <h2 class="text-5xl md:text-6xl font-bold text-white mb-4 animate-fade-in">Express Gratitude</h2>
            <p class="text-xl text-white/90 animate-fade-in-delayed">Capture the moments that make life beautiful ✨</p>
        </div>

        <!-- Main Form Card -->
        <div class="bg-white/95 backdrop-blur-lg rounded-3xl p-8 shadow-2xl relative overflow-hidden animate-slide-up">
            <form method="POST" action="/gratitude" class="space-y-8 relative" novalidate>
                <input type="hidden" name="csrf_token" value="{{.CSRFToken}}">
                <!-- Form messages -->
                <div id="form-messages" class="text-red-500"></div>
                <!-- Loading indicator removed -->
                <div class="group">
                    <label for="title" class="block text-sm font-medium text-gray-700 mb-2 group-focus-within:text-[#9C6FFF] transition-colors">Title</label>
                    <input type="text" id="title" name="title"
                           placeholder="What brings you joy today?"
                           value="{{index .Form "title"}}"
                           class="block w-full rounded-xl border-2 border-gray-100 shadow-sm focus:border-[#9C6FFF] focus:ring-[#9C6FFF] transition-all duration-200 text-lg py-3 px-4 bg-white/80">
                    {{if .Errors.title}}<div class="error-message text-red-500 text-sm mt-1">{{.Errors.title}}</div>{{end}}
                </div>
                <div class="group">
                    <label for="content" class="block text-sm font-medium text-gray-700 mb-2 group-focus-within:text-[#9C6FFF] transition-colors">Express Your Gratitude</label>
                    <textarea id="content" name="content" rows="4"
                              placeholder="Take a moment to reflect on what you're thankful for..."
                              class="block w-full rounded-xl border-2 border-gray-100 shadow-sm focus:border-[#9C6FFF] focus:ring-[#9C6FFF] transition-all duration-200 text-lg py-3 px-4 bg-white/80">{{index .Form "content"}}</textarea>
                    {{if .Errors.content}}<div class="error-message text-red-500 text-sm mt-1">{{.Errors.content}}</div>{{end}}
                </div>
                <div class="group">
                    <label for="category" class="block text-sm font-medium text-gray-700 mb-2 group-focus-within:text-[#9C6FFF] transition-colors">Category</label>
                    <select id="category" name="category"
                            class="block w-full rounded-xl border-2 border-gray-100 shadow-sm focus:border-[#9C6FFF] focus:ring-[#9C6FFF] transition-all duration-200 text-lg py-3 px-4 bg-white/80">
                        <option value="">Select a category</option>
                        <option value="personal" {{if eq (index .Form "category") "personal"}}selected{{end}}>✨ Personal Growth</option>
                        <option value="work" {{if eq (index .Form "category") "work"}}selected{{end}}>💼 Professional Life</option>
                        <option value="family" {{if eq (index .Form "category") "family"}}selected{{end}}>👨‍👩‍👧‍👦 Family & Friends</option>
                        <option value="achievements" {{if eq (index .Form "category") "achievements"}}selected{{end}}>🏆 Achievements</option>
                        <option value="health" {{if eq (index .Form "category") "health"}}selected{{end}}>🌱 Health & Wellness</option>
                        <option value="experiences" {{if eq (index .Form "category") "experiences"}}selected{{end}}>🌟 Experiences</option>
                    </select>
                    {{if .Errors.category}}<div class="error-message text-red-500 text-sm mt-1">{{.Errors.category}}</div>{{end}}
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-4">Choose an Emoji</label>
                    <div class="emoji-grid grid grid-cols-3 sm:grid-cols-4 md:grid-cols-6 gap-4 p-4 bg-white/80 rounded-xl border-2 border-gray-100">
                        <button type="button" class="emoji-btn text-4xl p-4 rounded-lg hover:scale-110 hover:bg-[#9C6FFF]/10 transition-all duration-300" data-emoji="✨" title="Sparkles">✨</button>
                        <button type="button" class="emoji-btn text-4xl p-4 rounded-lg hover:scale-110 hover:bg-[#9C6FFF]/10 transition-all duration-300" data-emoji="🌟" title="Glowing Star">🌟</button>
                        <button type="button" class="emoji-btn text-4xl p-4 rounded-lg hover:scale-110 hover:bg-[#9C6FFF]/10 transition-all duration-300" data-emoji="💫" title="Dizzy">💫</button>
                        <button type="button" class="emoji-btn text-4xl p-4 rounded-lg hover:scale-110 hover:bg-[#9C6FFF]/10 transition-all duration-300" data-emoji="🙏" title="Folded Hands">🙏</button>
                        <button type="button" class="emoji-btn text-4xl p-4 rounded-lg hover:scale-110 hover:bg-[#9C6FFF]/10 transition-all duration-300" data-emoji="❤️" title="Red Heart">❤️</button>
                        <button type="button" class="emoji-btn text-4xl p-4 rounded-lg hover:scale-110 hover:bg-[#9C6FFF]/10 transition-all duration-300" data-emoji="🌈" title="Rainbow">🌈</button>
                    </div>
                    <input type="hidden" id="selected-emoji" name="emoji" value="{{index .Form "emoji"}}">
                    {{if .Errors.emoji}}<div class="error-message text-red-500 text-sm mt-1">{{.Errors.emoji}}</div>{{end}}
                </div>
                <div class="flex justify-end pt-6">
                    <button type="submit"
                            class="inline-flex items-center px-8 py-4 text-lg font-medium text-white rounded-xl shadow-lg 
                                   bg-gradient-to-r from-[#FF8A3B] to-[#FF5858] hover:opacity-90
                                   transform hover:scale-105 transition-all duration-300">
                        <svg class="w-6 h-6 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                        </svg>
                        <span>Add Gratitude</span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<style>
@keyframes fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes slide-up {
    from { transform: translateY(20px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
}

@keyframes float-dots {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-20px); }
}

.animate-fade-in {
    animation: fade-in 0.8s ease-out forwards;
}

.animate-fade-in-delayed {
    animation: fade-in 0.8s ease-out 0.2s forwards;
    opacity: 0;
}

.animate-slide-up {
    animation: slide-up 0.8s ease-out forwards;
}

.emoji-btn.active {
    background: rgba(156, 111, 255, 0.2);
    transform: scale(1.1);
}

.polka-dot {
    position: absolute;
    width: 40px;
    height: 40px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    animation: float-dots 8s ease-in-out infinite;
}

.polka-dot:nth-child(1) { top: 10%; left: 10%; animation-delay: 0s; }
.polka-dot:nth-child(2) { top: 20%; left: 45%; animation-delay: 0.5s; }
.polka-dot:nth-child(3) { top: 15%; left: 80%; animation-delay: 1s; }
.polka-dot:nth-child(4) { top: 40%; left: 25%; animation-delay: 1.5s; }
.polka-dot:nth-child(5) { top: 50%; left: 60%; animation-delay: 2s; }
.polka-dot:nth-child(6) { top: 60%; left: 15%; animation-delay: 2.5s; }
.polka-dot:nth-child(7) { top: 70%; left: 70%; animation-delay: 3s; }
.polka-dot:nth-child(8) { top: 80%; left: 35%; animation-delay: 3.5s; }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const emojiButtons = document.querySelectorAll('.emoji-btn');
    const emojiInput = document.getElementById('selected-emoji');
    
    emojiButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Remove active class from all buttons
            emojiButtons.forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Add active class to clicked button
            this.classList.add('active');
            emojiInput.value = this.dataset.emoji;
        });
    });

    // Select the first emoji by default
    emojiButtons[0].click();

    // Handle form validation errors
    const form = document.querySelector('form');
    form.addEventListener('htmx:afterRequest', function(event) {
        // Clear previous error messages
        document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
        
        if (event.detail.xhr.status === 400) {
            try {
                const errors = JSON.parse(event.detail.xhr.responseText);
                Object.entries(errors).forEach(([field, message]) => {
                    const errorDiv = document.querySelector(`.error-message[data-field="${field}"]`);
                    if (errorDiv) {
                        errorDiv.textContent = message;
                        // Add error styling to the input
                        const input = document.querySelector(`[name="${field}"]`);
                        if (input) {
                            input.classList.add('border-red-500', 'ring-red-500');
                            input.classList.remove('border-gray-100', 'focus:border-primary-500', 'focus:ring-primary-500');
                        }
                    }
                });
            } catch (e) {
                console.error('Error parsing validation response:', e);
            }
        } else if (event.detail.xhr.status === 200) {
            // Clear any error styling on success
            document.querySelectorAll('input, textarea, select').forEach(input => {
                input.classList.remove('border-red-500', 'ring-red-500');
                input.classList.add('border-gray-100', 'focus:border-primary-500', 'focus:ring-primary-500');
            });
        }
    });

    // Reset error styling when user starts typing
    document.querySelectorAll('input, textarea, select').forEach(input => {
        input.addEventListener('input', function() {
            this.classList.remove('border-red-500', 'ring-red-500');
            this.classList.add('border-gray-100', 'focus:border-primary-500', 'focus:ring-primary-500');
            const errorDiv = document.querySelector(`.error-message[data-field="${this.name}"]`);
            if (errorDiv) {
                errorDiv.textContent = '';
            }
        });
    });
});
</script>
{{end}} 